package com.kazanion.ui.login

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.EditText
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.appcompat.app.AlertDialog
import com.kazanion.MainActivity
import com.kazanion.R
import com.kazanion.databinding.FragmentLoginBinding
import com.kazanion.network.ApiService
import com.kazanion.network.LoginRequest
import com.kazanion.network.LoginResponse

import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch

class LoginFragment : Fragment() {
    private var _binding: FragmentLoginBinding? = null
    private val binding get() = _binding!!
    private lateinit var apiService: ApiService

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLoginBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        apiService = ApiService.create()

        // Check if already logged in
        val sharedPreferences = requireContext().getSharedPreferences("login_prefs", Context.MODE_PRIVATE)
        if (sharedPreferences.getBoolean("isLoggedIn", false)) {
            if (findNavController().currentDestination?.id == R.id.loginFragment) {
                findNavController().navigate(R.id.action_loginFragment_to_homeFragment)
            }
            return
        }

        setupClickListeners()
    }

    private fun setupClickListeners() {
        binding.buttonLogin.setOnClickListener {
            val usernameOrEmail = binding.editTextEmail.text.toString().trim()
            val password = binding.editTextPassword.text.toString()

            if (usernameOrEmail.isNotEmpty() && password.isNotEmpty()) {
                login(usernameOrEmail, password)
            } else {
                Toast.makeText(context, "L√ºtfen t√ºm alanlarƒ± doldurun", Toast.LENGTH_SHORT).show()
            }
        }

        binding.buttonRegister.setOnClickListener {
            findNavController().navigate(R.id.action_loginFragment_to_registerFragment)
        }

        binding.forgotPasswordText.setOnClickListener {
            showForgotPasswordDialog()
        }
    }



    private fun login(username: String, password: String) {
        // Loading g√∂ster
        binding.buttonLogin.isEnabled = false
        binding.buttonLogin.text = "Giri≈ü yapƒ±lƒ±yor..."
        
        val loginRequest = LoginRequest(username, password)
        lifecycleScope.launch {
            try {
                val loginResponse = apiService.login(loginRequest)
                if (loginResponse.success && loginResponse.user != null) {
                    // Save login state and user info to phone
                    val sharedPreferences = requireContext().getSharedPreferences("login_prefs", Context.MODE_PRIVATE)
                    
                    // DisplayName olu≈ütur - ƒ∞sim Soyisim
                    val firstName = loginResponse.user.firstName ?: ""
                    val lastName = loginResponse.user.lastName ?: ""
                    val displayName = when {
                        firstName.isNotEmpty() && lastName.isNotEmpty() -> "$firstName $lastName"
                        firstName.isNotEmpty() -> firstName
                        else -> loginResponse.user.username
                    }
                    
                    with(sharedPreferences.edit()) {
                        putBoolean("isLoggedIn", true)
                        putString("token", loginResponse.token)
                        putString("userId", loginResponse.user.id?.toString())
                        putString("publicId", loginResponse.user.publicId ?: "000000")  // 6 haneli ID
                        putString("username", loginResponse.user.username)
                        putString("email", loginResponse.user.email)
                        putString("userDisplayName", displayName)  // FULL NAME KAYDEDƒ∞LDƒ∞
                        putString("userEmail", loginResponse.user.email)  // EMAIL AYRICA KAYDEDƒ∞LDƒ∞
                        putString("firstName", firstName)
                        putString("lastName", lastName)
                        putString("phoneNumber", loginResponse.user.phoneNumber ?: "")
                        putString("birthDate", loginResponse.user.birthDate ?: "")
                        putInt("points", loginResponse.user.points ?: 0)
                        putFloat("balance", (loginResponse.user.balance ?: 0.0).toFloat())
                        apply()
                    }
                    
                    Toast.makeText(context, "Ho≈ü geldin $firstName!", Toast.LENGTH_SHORT).show()
                    
                    // Navigate to home
                    findNavController().navigate(R.id.action_loginFragment_to_homeFragment)
                    
                    // Bildirim izni iste
                    (activity as? MainActivity)?.onLoginSuccess()
                } else {
                    // DAHA NET HATA MESAJLARI
                    val errorMessage = when {
                        loginResponse.message.contains("invalid", true) -> "E-posta veya ≈üifre hatalƒ±"
                        loginResponse.message.contains("credential", true) -> "E-posta veya ≈üifre hatalƒ±"
                        loginResponse.message.contains("password", true) -> "≈ûifre hatalƒ±"
                        loginResponse.message.contains("email", true) -> "E-posta adresi bulunamadƒ±"
                        loginResponse.message.contains("user", true) -> "Kullanƒ±cƒ± bulunamadƒ±"
                        else -> "E-posta veya ≈üifre hatalƒ±"
                    }
                    Toast.makeText(context, "‚ùå $errorMessage", Toast.LENGTH_LONG).show()
                }
            } catch (e: retrofit2.HttpException) {
                // HTTP hatalarƒ± i√ßin √∂zel mesajlar
                val errorMessage = when (e.code()) {
                    401 -> "E-posta veya ≈üifre hatalƒ±"
                    404 -> "Kullanƒ±cƒ± bulunamadƒ±"
                    400 -> "Ge√ßersiz bilgiler"
                    500 -> "Sunucu hatasƒ±, l√ºtfen daha sonra tekrar deneyin"
                    else -> "Giri≈ü yapƒ±lamadƒ± (${e.code()})"
                }
                Toast.makeText(context, "‚ùå $errorMessage", Toast.LENGTH_LONG).show()
            } catch (e: java.net.SocketTimeoutException) {
                Toast.makeText(context, "‚è±Ô∏è Sunucu √ßok yava≈ü, l√ºtfen tekrar deneyin", Toast.LENGTH_LONG).show()
            } catch (e: java.net.UnknownHostException) {
                Toast.makeText(context, "üîå ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin", Toast.LENGTH_LONG).show()
            } catch (e: Exception) {
                Toast.makeText(context, "‚ùå Baƒülantƒ± hatasƒ±: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
            } finally {
                // Loading'i kaldƒ±r
                if (_binding != null) {
                    binding.buttonLogin.isEnabled = true
                    binding.buttonLogin.text = "Giri≈ü Yap"
                }
            }
        }
    }



    private fun showForgotPasswordDialog() {
        val editText = EditText(requireContext())
        editText.hint = "E-posta adresinizi girin"

        AlertDialog.Builder(requireContext())
            .setTitle("≈ûifremi Unuttum")
            .setMessage("E-posta adresinizi girin, ≈üifrenizi size g√∂ndereceƒüiz.")
            .setView(editText)
            .setPositiveButton("G√∂nder") { _, _ ->
                val email = editText.text.toString().trim()
                if (email.isNotEmpty()) {
                    resetPassword(email)
                } else {
                    Toast.makeText(context, "L√ºtfen e-posta adresinizi girin", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ƒ∞ptal", null)
            .show()
    }

    private fun resetPassword(email: String) {
        lifecycleScope.launch {
            try {
                val request = mapOf("email" to email)
                val response = apiService.forgotPassword(request)
                
                if (response["success"] == true) {
                    Toast.makeText(context, response["message"].toString(), Toast.LENGTH_LONG).show()
                } else {
                    Toast.makeText(context, response["message"].toString(), Toast.LENGTH_LONG).show()
                }
            } catch (e: Exception) {
                Toast.makeText(context, "‚ùå ≈ûifre sƒ±fƒ±rlama hatasƒ±: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
} 